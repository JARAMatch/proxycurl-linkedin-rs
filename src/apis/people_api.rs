/*
 * Proxycurl API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method [`person_lookup_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PersonLookupEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`person_profile_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PersonProfileEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`person_profile_picture_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PersonProfilePictureEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`role_lookup_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum RoleLookupEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// Cost: 2 credits / successful request. Look up a person with a name and company information.
pub async fn person_lookup_endpoint(
    configuration: &configuration::Configuration,
    company_domain: &str,
    first_name: &str,
    enrich_profile: Option<&str>,
    location: Option<&str>,
    title: Option<&str>,
    last_name: Option<&str>,
) -> Result<crate::models::PersonLookupUrlEnrichResult, Error<PersonLookupEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/linkedin/profile/resolve",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = enrich_profile {
        local_var_req_builder =
            local_var_req_builder.query(&[("enrich_profile", &local_var_str.to_string())]);
    }
    local_var_req_builder =
        local_var_req_builder.query(&[("company_domain", &company_domain.to_string())]);
    if let Some(ref local_var_str) = location {
        local_var_req_builder =
            local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title {
        local_var_req_builder =
            local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("first_name", &first_name.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PersonLookupEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cost: 1 credit / successful request. Get structured data of a Personal Profile
#[allow(clippy::too_many_arguments)]
pub async fn person_profile_endpoint(
    configuration: &configuration::Configuration,
    url: &str,
    fallback_to_cache: &str,
    use_cache: Option<&str>,
    skills: Option<&str>,
    inferred_salary: Option<&str>,
    personal_email: Option<&str>,
    personal_contact_number: Option<&str>,
    twitter_profile_id: Option<&str>,
    facebook_profile_id: Option<&str>,
    github_profile_id: Option<&str>,
    extra: Option<&str>,
) -> Result<crate::models::PersonEndpointResponse, Error<PersonProfileEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/v2/linkedin", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("url", &url.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("fallback_to_cache", &fallback_to_cache.to_string())]);
    if let Some(ref local_var_str) = use_cache {
        local_var_req_builder =
            local_var_req_builder.query(&[("use_cache", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = skills {
        local_var_req_builder =
            local_var_req_builder.query(&[("skills", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = inferred_salary {
        local_var_req_builder =
            local_var_req_builder.query(&[("inferred_salary", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = personal_email {
        local_var_req_builder =
            local_var_req_builder.query(&[("personal_email", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = personal_contact_number {
        local_var_req_builder =
            local_var_req_builder.query(&[("personal_contact_number", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = twitter_profile_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("twitter_profile_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facebook_profile_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("facebook_profile_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = github_profile_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("github_profile_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = extra {
        local_var_req_builder =
            local_var_req_builder.query(&[("extra", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PersonProfileEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cost: 0 credit / successful request. Get the profile picture of a person.  Profile pictures are served from cached people profiles found within [LinkDB](https://nubela.co/proxycurl/linkdb). If the profile does not exist within [LinkDB](https://nubela.co/proxycurl/linkdb), then the API will return a `404` status code.
pub async fn person_profile_picture_endpoint(
    configuration: &configuration::Configuration,
    linkedin_person_profile_url: &str,
) -> Result<crate::models::ProfilePicture, Error<PersonProfilePictureEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/linkedin/person/profile-picture",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[(
        "linkedin_person_profile_url",
        &linkedin_person_profile_url.to_string(),
    )]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PersonProfilePictureEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cost: 3 credits / successful request. Finds the closest (person) profile with a given role in a Company. For example, you can use this endpoint to find the \"CTO\" of \"Apple\". This API endpoint returns only one result that is the closest match.  There is also the [Employee Search Endpoint] (https://nubela.co/proxycurl/docs#company-api-employee-search-api-endpoint)  which is powered by [LinkDB](https://nubela.co/proxycurl/linkdb) if you  require:  * precision on the target company * a list of employees that matches a role (instead of one result).
pub async fn role_lookup_endpoint(
    configuration: &configuration::Configuration,
    role: &str,
    company_name: &str,
    enrich_profile: Option<&str>,
) -> Result<crate::models::RoleSearchErichedResult, Error<RoleLookupEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/find/company/role/",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = enrich_profile {
        local_var_req_builder =
            local_var_req_builder.query(&[("enrich_profile", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("role", &role.to_string())]);
    local_var_req_builder =
        local_var_req_builder.query(&[("company_name", &company_name.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<RoleLookupEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

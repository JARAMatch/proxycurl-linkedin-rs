/*
 * Proxycurl API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method [`company_lookup_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompanyLookupEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`company_profile_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompanyProfileEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`company_profile_picture_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompanyProfilePictureEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`employee_count_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmployeeCountEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`employee_listing_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmployeeListingEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`employee_search_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum EmployeeSearchEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// Cost: 2 credits / successful request. Resolve Company LinkedIn Profile from company name,     domain name and location.
pub async fn company_lookup_endpoint(
    configuration: &configuration::Configuration,
    company_location: Option<&str>,
    company_domain: Option<&str>,
    company_name: Option<&str>,
    enrich_profile: Option<&str>,
) -> Result<crate::models::CompanyUrlEnrichResult, Error<CompanyLookupEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/linkedin/company/resolve",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = company_location {
        local_var_req_builder =
            local_var_req_builder.query(&[("company_location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = company_domain {
        local_var_req_builder =
            local_var_req_builder.query(&[("company_domain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = company_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("company_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enrich_profile {
        local_var_req_builder =
            local_var_req_builder.query(&[("enrich_profile", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CompanyLookupEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cost: 1 credit / successful request. Get structured data of a Company Profile
#[allow(clippy::too_many_arguments)]
pub async fn company_profile_endpoint(
    configuration: &configuration::Configuration,
    url: &str,
    resolve_numeric_id: Option<&str>,
    categories: Option<&str>,
    funding_data: Option<&str>,
    extra: Option<&str>,
    exit_data: Option<&str>,
    acquisitions: Option<&str>,
    use_cache: Option<&str>,
) -> Result<crate::models::LinkedinCompany, Error<CompanyProfileEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/linkedin/company", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = resolve_numeric_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("resolve_numeric_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = categories {
        local_var_req_builder =
            local_var_req_builder.query(&[("categories", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = funding_data {
        local_var_req_builder =
            local_var_req_builder.query(&[("funding_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = extra {
        local_var_req_builder =
            local_var_req_builder.query(&[("extra", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exit_data {
        local_var_req_builder =
            local_var_req_builder.query(&[("exit_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = acquisitions {
        local_var_req_builder =
            local_var_req_builder.query(&[("acquisitions", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("url", &url.to_string())]);
    if let Some(ref local_var_str) = use_cache {
        local_var_req_builder =
            local_var_req_builder.query(&[("use_cache", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CompanyProfileEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cost: 0 credit / successful request. Get the profile picture of a company.  Profile pictures are served from cached company profiles found within [LinkDB](https://nubela.co/proxycurl/linkdb). If the profile does not exist within [LinkDB](https://nubela.co/proxycurl/linkdb), then the API will return a `404` status code.
pub async fn company_profile_picture_endpoint(
    configuration: &configuration::Configuration,
    linkedin_company_profile_url: &str,
) -> Result<crate::models::ProfilePicture, Error<CompanyProfilePictureEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/linkedin/company/profile-picture",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[(
        "linkedin_company_profile_url",
        &linkedin_company_profile_url.to_string(),
    )]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CompanyProfilePictureEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cost: 1 credit / successful request. Get a number of total employees of a Company.  Get an employee count of this company from various sources.
pub async fn employee_count_endpoint(
    configuration: &configuration::Configuration,
    url: &str,
    use_cache: Option<&str>,
    linkedin_employee_count: Option<&str>,
    employment_status: Option<&str>,
) -> Result<crate::models::EmployeeCount, Error<EmployeeCountEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/linkedin/company/employees/count",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = use_cache {
        local_var_req_builder =
            local_var_req_builder.query(&[("use_cache", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = linkedin_employee_count {
        local_var_req_builder =
            local_var_req_builder.query(&[("linkedin_employee_count", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = employment_status {
        local_var_req_builder =
            local_var_req_builder.query(&[("employment_status", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("url", &url.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EmployeeCountEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cost: 3 credits / employee returned. Get a list of employees of a Company.  This API endpoint is limited by LinkDB which is populated with profiles in the US, UK, Canada, Israel, Australia, Ireland, New Zealand and Singapore. As such, this endpoint is best used to list employees working in companies based in those locations only.
#[allow(clippy::too_many_arguments)]
pub async fn employee_listing_endpoint(
    configuration: &configuration::Configuration,
    url: &str,
    country: Option<&str>,
    enrich_profiles: Option<&str>,
    role_search: Option<&str>,
    page_size: Option<&str>,
    employment_status: Option<&str>,
    sort_by: Option<&str>,
    resolve_numeric_id: Option<&str>,
) -> Result<crate::models::EmployeeList, Error<EmployeeListingEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/linkedin/company/employees/",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = country {
        local_var_req_builder =
            local_var_req_builder.query(&[("country", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enrich_profiles {
        local_var_req_builder =
            local_var_req_builder.query(&[("enrich_profiles", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_search {
        local_var_req_builder =
            local_var_req_builder.query(&[("role_search", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder =
            local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = employment_status {
        local_var_req_builder =
            local_var_req_builder.query(&[("employment_status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = sort_by {
        local_var_req_builder =
            local_var_req_builder.query(&[("sort_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = resolve_numeric_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("resolve_numeric_id", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[("url", &url.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EmployeeListingEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cost: 10 credits / successful request. Search employees of a target by their job title. This API endpoint is syntactic sugar for the role_search parameter under the [Employee Listing Endpoint](https://nubela.co/proxycurl/docs#company-api-employee-listing-endpoint).  Results are limited by data that we have within [LinkDB](https://nubela.co/proxycurl/linkdb). Use [Role Lookup API Endpoint](https://nubela.co/proxycurl/docs#people-api-role-lookup-endpoint) if you need to query for profiles without LinkDB constraints. The drawbacks of the Role Lookup API Endpoint is that it is less precise and can return at most one result per query.
pub async fn employee_search_endpoint(
    configuration: &configuration::Configuration,
    linkedin_company_profile_url: &str,
    keyword_regex: &str,
    page_size: Option<&str>,
    country: Option<&str>,
    enrich_profiles: Option<&str>,
    resolve_numeric_id: Option<&str>,
) -> Result<crate::models::EmployeeList, Error<EmployeeSearchEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/linkedin/company/employee/search/",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = page_size {
        local_var_req_builder =
            local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    local_var_req_builder = local_var_req_builder.query(&[(
        "linkedin_company_profile_url",
        &linkedin_company_profile_url.to_string(),
    )]);
    local_var_req_builder =
        local_var_req_builder.query(&[("keyword_regex", &keyword_regex.to_string())]);
    if let Some(ref local_var_str) = country {
        local_var_req_builder =
            local_var_req_builder.query(&[("country", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enrich_profiles {
        local_var_req_builder =
            local_var_req_builder.query(&[("enrich_profiles", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = resolve_numeric_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("resolve_numeric_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<EmployeeSearchEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

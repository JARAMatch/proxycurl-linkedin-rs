/*
 * Proxycurl API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method [`company_search_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum CompanySearchEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`person_search_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum PersonSearchEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// Cost: 35 credits / successful request base charge. Search for companies that meet a set of criteria within     our exhaustive dataset of company profiles.
#[allow(clippy::too_many_arguments)]
pub async fn company_search_endpoint(
    configuration: &configuration::Configuration,
    enrich_profiles: Option<&str>,
    page_size: Option<&str>,
    founded_before_year: Option<&str>,
    founded_after_year: Option<&str>,
    description: Option<&str>,
    employee_count_min: Option<&str>,
    employee_count_max: Option<&str>,
    industry: Option<&str>,
    name: Option<&str>,
    follower_count_max: Option<&str>,
    follower_count_min: Option<&str>,
    r#type: Option<&str>,
    city: Option<&str>,
    region: Option<&str>,
    country: Option<&str>,
) -> Result<crate::models::CompanySearchResult, Error<CompanySearchEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/search/company", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = enrich_profiles {
        local_var_req_builder =
            local_var_req_builder.query(&[("enrich_profiles", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder =
            local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = founded_before_year {
        local_var_req_builder =
            local_var_req_builder.query(&[("founded_before_year", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = founded_after_year {
        local_var_req_builder =
            local_var_req_builder.query(&[("founded_after_year", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder =
            local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = employee_count_min {
        local_var_req_builder =
            local_var_req_builder.query(&[("employee_count_min", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = employee_count_max {
        local_var_req_builder =
            local_var_req_builder.query(&[("employee_count_max", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = industry {
        local_var_req_builder =
            local_var_req_builder.query(&[("industry", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder =
            local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = follower_count_max {
        local_var_req_builder =
            local_var_req_builder.query(&[("follower_count_max", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = follower_count_min {
        local_var_req_builder =
            local_var_req_builder.query(&[("follower_count_min", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder =
            local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = city {
        local_var_req_builder =
            local_var_req_builder.query(&[("city", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = country {
        local_var_req_builder =
            local_var_req_builder.query(&[("country", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<CompanySearchEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cost: 35 credits / successful request base charge. Search for people who meet a set of criteria within our exhaustive dataset of people profiles.  This API endpoint is powered by [LinkDB](https://nubela.co/proxycurl/linkdb), our exhaustive dataset of people and company profiles.
#[allow(clippy::too_many_arguments)]
pub async fn person_search_endpoint(
    configuration: &configuration::Configuration,
    enrich_profiles: Option<&str>,
    page_size: Option<&str>,
    summary: Option<&str>,
    headline: Option<&str>,
    city: Option<&str>,
    region: Option<&str>,
    country: Option<&str>,
    languages: Option<&str>,
    linkedin_groups: Option<&str>,
    past_company_name: Option<&str>,
    current_company_name: Option<&str>,
    past_job_description: Option<&str>,
    current_job_description: Option<&str>,
    past_company_linkedin_profile_url: Option<&str>,
    current_company_linkedin_profile_url: Option<&str>,
    current_role_before: Option<&str>,
    current_role_after: Option<&str>,
    past_role_title: Option<&str>,
    current_role_title: Option<&str>,
    education_school_linkedin_profile_url: Option<&str>,
    education_school_name: Option<&str>,
    education_degree_name: Option<&str>,
    education_field_of_study: Option<&str>,
    last_name: Option<&str>,
    first_name: Option<&str>,
) -> Result<crate::models::PersonSearchResult, Error<PersonSearchEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/search/person/", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = enrich_profiles {
        local_var_req_builder =
            local_var_req_builder.query(&[("enrich_profiles", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = page_size {
        local_var_req_builder =
            local_var_req_builder.query(&[("page_size", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = summary {
        local_var_req_builder =
            local_var_req_builder.query(&[("summary", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = headline {
        local_var_req_builder =
            local_var_req_builder.query(&[("headline", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = city {
        local_var_req_builder =
            local_var_req_builder.query(&[("city", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder =
            local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = country {
        local_var_req_builder =
            local_var_req_builder.query(&[("country", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = languages {
        local_var_req_builder =
            local_var_req_builder.query(&[("languages", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = linkedin_groups {
        local_var_req_builder =
            local_var_req_builder.query(&[("linkedin_groups", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = past_company_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("past_company_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = current_company_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("current_company_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = past_job_description {
        local_var_req_builder =
            local_var_req_builder.query(&[("past_job_description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = current_job_description {
        local_var_req_builder =
            local_var_req_builder.query(&[("current_job_description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = past_company_linkedin_profile_url {
        local_var_req_builder = local_var_req_builder.query(&[(
            "past_company_linkedin_profile_url",
            &local_var_str.to_string(),
        )]);
    }
    if let Some(ref local_var_str) = current_company_linkedin_profile_url {
        local_var_req_builder = local_var_req_builder.query(&[(
            "current_company_linkedin_profile_url",
            &local_var_str.to_string(),
        )]);
    }
    if let Some(ref local_var_str) = current_role_before {
        local_var_req_builder =
            local_var_req_builder.query(&[("current_role_before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = current_role_after {
        local_var_req_builder =
            local_var_req_builder.query(&[("current_role_after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = past_role_title {
        local_var_req_builder =
            local_var_req_builder.query(&[("past_role_title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = current_role_title {
        local_var_req_builder =
            local_var_req_builder.query(&[("current_role_title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = education_school_linkedin_profile_url {
        local_var_req_builder = local_var_req_builder.query(&[(
            "education_school_linkedin_profile_url",
            &local_var_str.to_string(),
        )]);
    }
    if let Some(ref local_var_str) = education_school_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("education_school_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = education_degree_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("education_degree_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = education_field_of_study {
        local_var_req_builder = local_var_req_builder
            .query(&[("education_field_of_study", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("last_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = first_name {
        local_var_req_builder =
            local_var_req_builder.query(&[("first_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<PersonSearchEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

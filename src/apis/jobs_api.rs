/*
 * Proxycurl API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

use reqwest;

use super::{configuration, Error};
use crate::apis::ResponseContent;

/// struct for typed errors of method [`job_profile_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JobProfileEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`jobs_listing_count_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JobsListingCountEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`jobs_listing_endpoint`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum JobsListingEndpointError {
    Status400(),
    Status401(),
    Status403(),
    Status404(),
    Status429(),
    Status500(),
    Status503(),
    UnknownValue(serde_json::Value),
}

/// Cost: 2 credits / successful request. Get structured data of a LinkedIn Job Profile
pub async fn job_profile_endpoint(
    configuration: &configuration::Configuration,
    url: &str,
) -> Result<crate::models::JobProfile, Error<JobProfileEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/api/linkedin/job", local_var_configuration.base_path);
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("url", &url.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<JobProfileEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cost: 2 credits / successful request. Count number of jobs posted by a company on LinkedIn
#[allow(clippy::too_many_arguments)]
pub async fn jobs_listing_count_endpoint(
    configuration: &configuration::Configuration,
    job_type: Option<&str>,
    experience_level: Option<&str>,
    when: Option<&str>,
    flexibility: Option<&str>,
    geo_id: Option<&str>,
    keyword: Option<&str>,
    search_id: Option<&str>,
) -> Result<crate::models::JobListCount, Error<JobsListingCountEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v2/linkedin/company/job/count",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = job_type {
        local_var_req_builder =
            local_var_req_builder.query(&[("job_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = experience_level {
        local_var_req_builder =
            local_var_req_builder.query(&[("experience_level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = when {
        local_var_req_builder =
            local_var_req_builder.query(&[("when", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = flexibility {
        local_var_req_builder =
            local_var_req_builder.query(&[("flexibility", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = geo_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("geo_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = keyword {
        local_var_req_builder =
            local_var_req_builder.query(&[("keyword", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("search_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<JobsListingCountEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Cost: 2 credits / successful request. List jobs posted by a company on LinkedIn
#[allow(clippy::too_many_arguments)]
pub async fn jobs_listing_endpoint(
    configuration: &configuration::Configuration,
    job_type: Option<&str>,
    experience_level: Option<&str>,
    when: Option<&str>,
    flexibility: Option<&str>,
    geo_id: Option<&str>,
    keyword: Option<&str>,
    search_id: Option<&str>,
) -> Result<crate::models::JobListPage, Error<JobsListingEndpointError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!(
        "{}/api/v2/linkedin/company/job",
        local_var_configuration.base_path
    );
    let mut local_var_req_builder =
        local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = job_type {
        local_var_req_builder =
            local_var_req_builder.query(&[("job_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = experience_level {
        local_var_req_builder =
            local_var_req_builder.query(&[("experience_level", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = when {
        local_var_req_builder =
            local_var_req_builder.query(&[("when", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = flexibility {
        local_var_req_builder =
            local_var_req_builder.query(&[("flexibility", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = geo_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("geo_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = keyword {
        local_var_req_builder =
            local_var_req_builder.query(&[("keyword", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_id {
        local_var_req_builder =
            local_var_req_builder.query(&[("search_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder =
            local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_token) = local_var_configuration.api_key {
        local_var_req_builder = local_var_req_builder.bearer_auth(local_var_token.to_owned());
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<JobsListingEndpointError> =
            serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent {
            status: local_var_status,
            content: local_var_content,
            entity: local_var_entity,
        };
        Err(Error::ResponseError(local_var_error))
    }
}

/*
 * Proxycurl API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct JobProfile {
    ///          The internal ID representation of this job that LinkedIn has for this job.         
    #[serde(
        rename = "linkedin_internal_id",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub linkedin_internal_id: Option<Option<String>>,
    ///          Description of the posted job.         
    #[serde(
        rename = "job_description",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub job_description: Option<Option<String>>,
    ///          The URL to apply for this job.         
    #[serde(
        rename = "apply_url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub apply_url: Option<Option<String>>,
    ///          Title of the posted job.         
    #[serde(
        rename = "title",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub title: Option<Option<String>>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<crate::models::JobLocation>>,
    #[serde(rename = "company", skip_serializing_if = "Option::is_none")]
    pub company: Option<Box<crate::models::JobCompany>>,
    ///          The seniority level for this role.         
    #[serde(
        rename = "seniority_level",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub seniority_level: Option<Option<String>>,
    ///          A list of industries that the company which posted this job lies in.         
    #[serde(rename = "industry", skip_serializing_if = "Option::is_none")]
    pub industry: Option<Vec<String>>,
    ///          Type of employment.         
    #[serde(
        rename = "employment_type",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub employment_type: Option<Option<String>>,
    ///          A list of job functions that this role is expected to cover.         
    #[serde(rename = "job_functions", skip_serializing_if = "Option::is_none")]
    pub job_functions: Option<Vec<String>>,
    ///          Total applicants for this job so far.         
    #[serde(
        rename = "total_applicants",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub total_applicants: Option<Option<i32>>,
}

impl JobProfile {
    pub fn new() -> JobProfile {
        JobProfile {
            linkedin_internal_id: None,
            job_description: None,
            apply_url: None,
            title: None,
            location: None,
            company: None,
            seniority_level: None,
            industry: None,
            employment_type: None,
            job_functions: None,
            total_applicants: None,
        }
    }
}

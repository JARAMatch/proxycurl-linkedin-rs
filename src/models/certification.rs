/*
 * Proxycurl API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct Certification {
    #[serde(rename = "starts_at", skip_serializing_if = "Option::is_none")]
    pub starts_at: Option<Box<crate::models::Date>>,
    #[serde(rename = "ends_at", skip_serializing_if = "Option::is_none")]
    pub ends_at: Option<Box<crate::models::Date>>,
    /// Name of the course or program.
    #[serde(
        rename = "name",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub name: Option<Option<String>>,
    #[serde(
        rename = "license_number",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub license_number: Option<Option<String>>,
    #[serde(
        rename = "display_source",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub display_source: Option<Option<String>>,
    /// The organisation body issuing this certificate.
    #[serde(
        rename = "authority",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub authority: Option<Option<String>>,
    #[serde(
        rename = "url",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub url: Option<Option<String>>,
}

impl Certification {
    pub fn new() -> Certification {
        Certification {
            starts_at: None,
            ends_at: None,
            name: None,
            license_number: None,
            display_source: None,
            authority: None,
            url: None,
        }
    }
}

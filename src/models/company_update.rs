/*
 * Proxycurl API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CompanyUpdate {
    /// The URL for which the post links out to
    #[serde(
        rename = "article_link",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub article_link: Option<Option<String>>,
    /// The URL to the image to the post (if it exists)
    #[serde(
        rename = "image",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub image: Option<Option<String>>,
    #[serde(rename = "posted_on", skip_serializing_if = "Option::is_none")]
    pub posted_on: Option<Box<crate::models::Date>>,
    /// The body of the update
    #[serde(
        rename = "text",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub text: Option<Option<String>>,
    /// The total likes a post has received
    #[serde(
        rename = "total_likes",
        default,
        with = "::serde_with::rust::double_option",
        skip_serializing_if = "Option::is_none"
    )]
    pub total_likes: Option<Option<i32>>,
}

impl CompanyUpdate {
    pub fn new() -> CompanyUpdate {
        CompanyUpdate {
            article_link: None,
            image: None,
            posted_on: None,
            text: None,
            total_likes: None,
        }
    }
}
